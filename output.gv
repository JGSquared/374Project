digraph G{rankdir=BT;CodeMapGetters[ shape="record", color="", label="{CodeMapGetters|- items : HashMap\l|- findFieldProperties(java.lang.String) : String[]\l+ getFieldNames() : ArrayList\l+ getFieldAccess(java.lang.String) : int\l+ getFieldType(java.lang.String) : String\l+ getClassName() : String\l+ getAccess() : int\l+ getClassExtends() : String\l+ getClassImplements() : String[]\l+ getSequenceMethodCaller(java.lang.String) : String\l+ getFieldSignature(java.lang.String) : String\l+ getClassUses() : ArrayList\l+ getMethodReturnType(java.lang.String) : String\l+ getSequenceNodeKeys() : ArrayList\l+ getClassAssociates() : ArrayList\l+ getMethodNames() : ArrayList\l- findMethodProperties(java.lang.String) : String[]\l+ getMethodArgTypes(java.lang.String) : String[]\l+ getMethodAccess(java.lang.String) : int\l+ getSequenceMethodKeys() : ArrayList\l+ getSequenceNodeValue(java.lang.String) : String\l+ getSequenceMethodName(java.lang.String) : String\l+ getSequenceMethodCallee(java.lang.String) : String\l+ getFieldFromMap(java.lang.String) : String\l+ getSequenceMethodArgs(java.lang.String) : String[]\l}"];CodeMapGetters -> Object [arrowhead="onormal", style="solid", label="", color=""];CodeMapGetters -> CodeMapGetters [arrowhead="open", style="dashed", label="", color=""];CodeMapGetters -> Iterator [arrowhead="open", style="dashed", label="", color=""];IArrow[ shape="record", color="", label="{\<\<interface\>\>\nIArrow|| setColor(java.lang.String) : void\l getType() : String\l setType(java.lang.String) : void\l getArrowhead() : String\l setFrom(java.lang.String) : void\l getTo() : String\l setTo(java.lang.String) : void\l getColor() : String\l setArrowhead(java.lang.String) : void\l setCanLabel(boolean) : void\l getCanLabel() : boolean\l setStyle(java.lang.String) : void\l getStyle() : String\l setLabel(java.lang.String) : void\l getLabel() : String\l getFrom() : String\l}"];IArrow -> Object [arrowhead="onormal", style="solid", label="", color=""];IArrow -> ITraverser [arrowhead="onormal", style="dashed", label="", color=""];IClass[ shape="record", color="", label="{\<\<interface\>\>\nIClass|| setAccess(int) : void\l getPatternLabel() : String\l setPatternLabel(java.lang.String) : void\l getCanLabel() : boolean\l setColor(java.lang.String) : void\l getClassName() : String\l setClassName(java.lang.String) : void\l getAccess() : int\l setCanLabel(boolean) : void\l addIMethod(problem.api.IMethod) : void\l getMethods() : List\l addIArrow(problem.api.IArrow) : void\l getArrows() : List\l addRelated(problem.api.IClass) : void\l getRelated() : List\l addIField(problem.api.IField) : void\l getFields() : List\l getColor() : String\l getRelatedClassNames(java.lang.String) : List\l}"];IClass -> Object [arrowhead="onormal", style="solid", label="", color=""];IClass -> ITraverser [arrowhead="onormal", style="dashed", label="", color=""];IClass -> IMethod [arrowhead="open", style="dashed", label="", color=""];IClass -> IArrow [arrowhead="open", style="dashed", label="", color=""];IClass -> IClass [arrowhead="open", style="dashed", label="", color=""];IClass -> IField [arrowhead="open", style="dashed", label="", color=""];ICommand[ shape="record", color="", label="{\<\<interface\>\>\nICommand|| execute(problem.api.ITraverser) : void\l}"];ICommand -> Object [arrowhead="onormal", style="solid", label="", color=""];ICommand -> ITraverser [arrowhead="open", style="dashed", label="", color=""];IDesignParser[ shape="record", color="", label="{\<\<interface\>\>\nIDesignParser|| parse(java.lang.String,  problem.api.IGraphDesign) : void\l}"];IDesignParser -> Object [arrowhead="onormal", style="solid", label="", color=""];IDesignParser -> IGraphDesign [arrowhead="open", style="dashed", label="", color=""];IField[ shape="record", color="", label="{\<\<interface\>\>\nIField|| setType(java.lang.String) : void\l setName(java.lang.String) : void\l getAccess() : int\l setAccess(int) : void\l getType() : String\l getName() : String\l}"];IField -> Object [arrowhead="onormal", style="solid", label="", color=""];IField -> ITraverser [arrowhead="onormal", style="dashed", label="", color=""];IGraphCode[ shape="record", color="", label="{\<\<interface\>\>\nIGraphCode|| getCode(problem.api.CodeMapGetters) : String\l}"];IGraphCode -> Object [arrowhead="onormal", style="solid", label="", color=""];IGraphCode -> CodeMapGetters [arrowhead="open", style="dashed", label="", color=""];IGraphDesign[ shape="record", color="", label="{\<\<interface\>\>\nIGraphDesign|| addGraphCode(java.util.HashMap) : void\l}"];IGraphDesign -> Object [arrowhead="onormal", style="solid", label="", color=""];IMethod[ shape="record", color="", label="{\<\<interface\>\>\nIMethod|| addArgType(java.lang.String) : void\l getReturnType() : String\l setReturnType(java.lang.String) : void\l setName(java.lang.String) : void\l getAccess() : int\l setAccess(int) : void\l getArgTypes() : List\l getName() : String\l}"];IMethod -> Object [arrowhead="onormal", style="solid", label="", color=""];IMethod -> ITraverser [arrowhead="onormal", style="dashed", label="", color=""];IPatternDetector[ shape="record", color="", label="{\<\<interface\>\>\nIPatternDetector|| detectPattern() : void\l}"];IPatternDetector -> Object [arrowhead="onormal", style="solid", label="", color=""];IPhase[ shape="record", color="", label="{\<\<interface\>\>\nIPhase|| execute() : void\l}"];IPhase -> Object [arrowhead="onormal", style="solid", label="", color=""];ITraverser[ shape="record", color="", label="{\<\<interface\>\>\nITraverser|| accept(problem.api.IVisitor) : void\l}"];ITraverser -> Object [arrowhead="onormal", style="solid", label="", color=""];ITraverser -> IVisitor [arrowhead="open", style="dashed", label="", color=""];IVisitor[ shape="record", color="", label="{\<\<interface\>\>\nIVisitor|| addPostVisit(java.lang.Class,  problem.api.ICommand) : void\l visit(problem.api.ITraverser) : void\l postVisit(problem.api.ITraverser) : void\l addPreVisit(java.lang.Class,  problem.api.ICommand) : void\l addVisit(java.lang.Class,  problem.api.ICommand) : void\l preVisit(problem.api.ITraverser) : void\l}"];IVisitor -> Object [arrowhead="onormal", style="solid", label="", color=""];IVisitor -> Class [arrowhead="open", style="dashed", label="", color=""];IVisitor -> ICommand [arrowhead="open", style="dashed", label="", color=""];IVisitor -> ITraverser [arrowhead="open", style="dashed", label="", color=""];IWriter[ shape="record", color="", label="{\<\<interface\>\>\nIWriter|| generateGraph() : void\l}"];IWriter -> Object [arrowhead="onormal", style="solid", label="", color=""];IWriter -> IVisitor [arrowhead="onormal", style="dashed", label="", color=""];App[ shape="record", color="", label="{App|| main(java.lang.String) : void\l}"];App -> Object [arrowhead="onormal", style="solid", label="", color=""];App -> UI [arrowhead="open", style="solid", label="", color=""];App -> PhaseRunner [arrowhead="open", style="solid", label="", color=""];App -> DecoratorPhase [arrowhead="open", style="solid", label="", color=""];App -> LoaderPhase [arrowhead="open", style="solid", label="", color=""];App -> SingletonPhase [arrowhead="open", style="solid", label="", color=""];ClassDesignParser[ shape="record", color="", label="{ClassDesignParser|- parsedCode : HashMap\l|+ parse(java.lang.String,  problem.api.IGraphDesign) : void\l}"];ClassDesignParser -> Object [arrowhead="onormal", style="solid", label="", color=""];ClassDesignParser -> IDesignParser [arrowhead="onormal", style="dashed", label="", color=""];ClassDesignParser -> ClassUsesVisitor [arrowhead="open", style="solid", label="", color=""];ClassDesignParser -> ClassMethodVisitor [arrowhead="open", style="solid", label="", color=""];ClassDesignParser -> ClassDeclarationVisitor [arrowhead="open", style="solid", label="", color=""];ClassDesignParser -> ClassAssociationVisitor [arrowhead="open", style="solid", label="", color=""];ClassDesignParser -> ClassFieldVisitor [arrowhead="open", style="solid", label="", color=""];ClassDesignParser -> IGraphDesign [arrowhead="open", style="dashed", label="", color=""];ClassStorage[ shape="record", color="", label="{ClassStorage|- classes : List\l uniqueController : ClassStorage\l|- falsifyAllFlags() : void\l getInstance() : ClassStorage\l+ addIClass(problem.api.IClass) : void\l+ getClasses() : List\l+ setClassesToLabel(java.util.List) : void\l}"];ClassStorage -> Object [arrowhead="onormal", style="solid", label="", color=""];ClassStorage -> ClassStorage [arrowhead="open", style="solid", label="", color=""];ClassStorage -> IClass [arrowhead="open", style="solid", label="", color=""];ClassStorage -> IArrow [arrowhead="open", style="dashed", label="", color=""];ClassStorage -> Helpers [arrowhead="open", style="dashed", label="", color=""];ClassStorage -> Iterator [arrowhead="open", style="dashed", label="", color=""];AbstractCodeWriter[ shape="record", color="", label="{AbstractCodeWriter|- visitClassToCommand : Map\l- preVisitClassToCommand : Map\l- postVisitClassToCommand : Map\l|+ addVisit(java.lang.Class,  problem.api.ICommand) : void\l+ addPostVisit(java.lang.Class,  problem.api.ICommand) : void\l+ preVisit(problem.api.ITraverser) : void\l+ visit(problem.api.ITraverser) : void\l+ postVisit(problem.api.ITraverser) : void\l+ addPreVisit(java.lang.Class,  problem.api.ICommand) : void\l}"];AbstractCodeWriter -> Object [arrowhead="onormal", style="solid", label="", color=""];AbstractCodeWriter -> IWriter [arrowhead="onormal", style="dashed", label="", color=""];AbstractCodeWriter -> Map [arrowhead="open", style="solid", label="", color=""];AbstractCodeWriter -> Class [arrowhead="open", style="solid", label="", color=""];AbstractCodeWriter -> ICommand [arrowhead="open", style="dashed", label="", color=""];AbstractCodeWriter -> ITraverser [arrowhead="open", style="dashed", label="", color=""];GraphClassCloserCode[ shape="record", color="", label="{GraphClassCloserCode||+ getCode(problem.api.CodeMapGetters) : String\l}"];GraphClassCloserCode -> Object [arrowhead="onormal", style="solid", label="", color=""];GraphClassCloserCode -> IGraphCode [arrowhead="onormal", style="dashed", label="", color=""];GraphClassCloserCode -> CodeMapGetters [arrowhead="open", style="dashed", label="", color=""];GraphDeclarationCode[ shape="record", color="", label="{GraphDeclarationCode||+ getCode(problem.api.CodeMapGetters) : String\l}"];GraphDeclarationCode -> Object [arrowhead="onormal", style="solid", label="", color=""];GraphDeclarationCode -> IGraphCode [arrowhead="onormal", style="dashed", label="", color=""];GraphDeclarationCode -> CodeMapGetters [arrowhead="open", style="dashed", label="", color=""];GraphDeclarationCode -> Helpers [arrowhead="open", style="dashed", label="", color=""];GraphExtensionAndImplementCode[ shape="record", color="", label="{GraphExtensionAndImplementCode||+ getCode(problem.api.CodeMapGetters) : String\l}"];GraphExtensionAndImplementCode -> Object [arrowhead="onormal", style="solid", label="", color=""];GraphExtensionAndImplementCode -> IGraphCode [arrowhead="onormal", style="dashed", label="", color=""];GraphExtensionAndImplementCode -> CodeMapGetters [arrowhead="open", style="dashed", label="", color=""];GraphExtensionAndImplementCode -> FileProperties [arrowhead="open", style="dashed", label="", color=""];GraphExtensionAndImplementCode -> Helpers [arrowhead="open", style="dashed", label="", color=""];GraphFieldCode[ shape="record", color="", label="{GraphFieldCode||+ getCode(problem.api.CodeMapGetters) : String\l}"];GraphFieldCode -> Object [arrowhead="onormal", style="solid", label="", color=""];GraphFieldCode -> IGraphCode [arrowhead="onormal", style="dashed", label="", color=""];GraphFieldCode -> CodeMapGetters [arrowhead="open", style="dashed", label="", color=""];GraphFieldCode -> Helpers [arrowhead="open", style="dashed", label="", color=""];GraphFieldCode -> Iterator [arrowhead="open", style="dashed", label="", color=""];GraphMethodCode[ shape="record", color="", label="{GraphMethodCode||+ getCode(problem.api.CodeMapGetters) : String\l}"];GraphMethodCode -> Object [arrowhead="onormal", style="solid", label="", color=""];GraphMethodCode -> IGraphCode [arrowhead="onormal", style="dashed", label="", color=""];GraphMethodCode -> CodeMapGetters [arrowhead="open", style="dashed", label="", color=""];GraphMethodCode -> Helpers [arrowhead="open", style="dashed", label="", color=""];GraphMethodCode -> Iterator [arrowhead="open", style="dashed", label="", color=""];GraphSequenceMethodCode[ shape="record", color="", label="{GraphSequenceMethodCode| KEY_NAME : String\l|+ getCode(problem.api.CodeMapGetters) : String\l}"];GraphSequenceMethodCode -> Object [arrowhead="onormal", style="solid", label="", color=""];GraphSequenceMethodCode -> IGraphCode [arrowhead="onormal", style="dashed", label="", color=""];GraphSequenceMethodCode -> CodeMapGetters [arrowhead="open", style="dashed", label="", color=""];GraphSequenceMethodCode -> FileProperties [arrowhead="open", style="dashed", label="", color=""];GraphSequenceMethodCode -> Helpers [arrowhead="open", style="dashed", label="", color=""];GraphSequenceNodeCode[ shape="record", color="", label="{GraphSequenceNodeCode| KEY_NAME : String\l|+ getCode(problem.api.CodeMapGetters) : String\l}"];GraphSequenceNodeCode -> Object [arrowhead="onormal", style="solid", label="", color=""];GraphSequenceNodeCode -> IGraphCode [arrowhead="onormal", style="dashed", label="", color=""];GraphSequenceNodeCode -> CodeMapGetters [arrowhead="open", style="dashed", label="", color=""];GraphSequenceNodeCode -> FileProperties [arrowhead="open", style="dashed", label="", color=""];GraphSequenceNodeCode -> Helpers [arrowhead="open", style="dashed", label="", color=""];GraphUsesCode[ shape="record", color="", label="{GraphUsesCode||+ getCode(problem.api.CodeMapGetters) : String\l}"];GraphUsesCode -> Object [arrowhead="onormal", style="solid", label="", color=""];GraphUsesCode -> IGraphCode [arrowhead="onormal", style="dashed", label="", color=""];GraphUsesCode -> CodeMapGetters [arrowhead="open", style="dashed", label="", color=""];GraphUsesCode -> FileProperties [arrowhead="open", style="dashed", label="", color=""];GraphUsesCode -> Helpers [arrowhead="open", style="dashed", label="", color=""];GraphUsesCode -> Iterator [arrowhead="open", style="dashed", label="", color=""];UMLCodeWriter[ shape="record", color="", label="{UMLCodeWriter| out : OutputStream\l|- addPostVisits() : void\l+ getStream() : OutputStream\l access$0(problem.code.UMLCodeWriter,  java.lang.String) : void\l+ generateGraph() : void\l- write(java.lang.String) : void\l- addPreVisits() : void\l- addVisits() : void\l}"];UMLCodeWriter -> AbstractCodeWriter [arrowhead="onormal", style="solid", label="", color=""];UMLCodeWriter -> AbstractCodeWriter [arrowhead="open", style="solid", label="", color=""];UMLCodeWriter -> RuntimeException [arrowhead="open", style="solid", label="", color=""];UMLCodeWriter -> UMLCodeWriter [arrowhead="open", style="dashed", label="", color=""];UMLCodeWriter -> ClassStorage [arrowhead="open", style="dashed", label="", color=""];UMLCodeWriter -> IClass [arrowhead="open", style="dashed", label="", color=""];UMLCodeWriter -> Iterator [arrowhead="open", style="dashed", label="", color=""];ConfigProperties[ shape="record", color="", label="{ConfigProperties|- props : Properties\l uniqueController : ConfigProperties\l- progressBar : JProgressBar\l- phases : String[]\l- inputClasses : String[]\l- inputFolder : String\l- dotPath : String\l- outputFolder : String\l|+ getOutputFolder() : String\l+ getDotPath() : String\l+ getPhases() : String[]\l+ getProperty(java.lang.String) : String\l getInstance() : ConfigProperties\l+ setupConfig(java.lang.String) : void\l+ getInputFolder() : String\l+ getInputClasses() : String[]\l+ setProgressBar(javax.swing.JProgressBar) : void\l}"];ConfigProperties -> Object [arrowhead="onormal", style="solid", label="", color=""];ConfigProperties -> String[] [arrowhead="open", style="solid", label="", color=""];ConfigProperties -> Properties [arrowhead="open", style="solid", label="", color=""];ConfigProperties -> ConfigProperties [arrowhead="open", style="solid", label="", color=""];ConfigProperties -> FileInputStream [arrowhead="open", style="solid", label="", color=""];ConfigProperties -> JProgressBar [arrowhead="open", style="solid", label="", color=""];Constants[ shape="record", color="", label="{Constants| COLOR_OFFSET : String\l LABEL_OFFSET : String\l OUTFILE_NAME : String\l ARROW_OFFSET : String\l|}"];Constants -> Object [arrowhead="onormal", style="solid", label="", color=""];DotGraphDesign[ shape="record", color="", label="{DotGraphDesign|- fp : FileProperties\l- sb : StringBuilder\l- getters : CodeMapGetters\l- classCode : HashMap\l- codeGetters : List\l- patternDetectors : List\l- classProperties : List\l|+ addGraphCode(java.util.HashMap) : void\l}"];DotGraphDesign -> Object [arrowhead="onormal", style="solid", label="", color=""];DotGraphDesign -> IGraphDesign [arrowhead="onormal", style="dashed", label="", color=""];DotGraphDesign -> UMLArrow [arrowhead="open", style="solid", label="", color=""];DotGraphDesign -> CodeMapGetters [arrowhead="open", style="solid", label="", color=""];DotGraphDesign -> FileProperties [arrowhead="open", style="solid", label="", color=""];DotGraphDesign -> UMLMethod [arrowhead="open", style="solid", label="", color=""];DotGraphDesign -> UMLField [arrowhead="open", style="solid", label="", color=""];DotGraphDesign -> UMLClass [arrowhead="open", style="solid", label="", color=""];DotGraphDesign -> IGraphCode [arrowhead="open", style="solid", label="", color=""];DotGraphDesign -> IPatternDetector [arrowhead="open", style="solid", label="", color=""];DotGraphDesign -> IMethod [arrowhead="open", style="dashed", label="", color=""];DotGraphDesign -> Helpers [arrowhead="open", style="dashed", label="", color=""];DotGraphDesign -> ClassStorage [arrowhead="open", style="dashed", label="", color=""];DotGraphDesign -> IClass [arrowhead="open", style="dashed", label="", color=""];DotGraphDesign -> Iterator [arrowhead="open", style="dashed", label="", color=""];FileProperties[ shape="record", color="", label="{FileProperties|+ graphVizPath : String\l uniqueInstance : FileProperties\l+ whiteList : List\l+ fileIn : String\l+ flags : String\l+ sdEditPath : String\l+ fileOut : String\l| getInstance() : FileProperties\l}"];FileProperties -> Object [arrowhead="onormal", style="solid", label="", color=""];FileProperties -> FileProperties [arrowhead="open", style="solid", label="", color=""];UMLArrow[ shape="record", color="", label="{UMLArrow|- to : String\l- from : String\l- canLabel : boolean\l- label : String\l- type : String\l- color : String\l- style : String\l- arrowhead : String\l|+ setTo(java.lang.String) : void\l+ getColor() : String\l+ setColor(java.lang.String) : void\l+ getType() : String\l+ accept(problem.api.IVisitor) : void\l+ getFrom() : String\l+ setFrom(java.lang.String) : void\l+ getTo() : String\l+ setType(java.lang.String) : void\l+ setLabel(java.lang.String) : void\l+ getLabel() : String\l+ setCanLabel(boolean) : void\l+ getCanLabel() : boolean\l+ setArrowhead(java.lang.String) : void\l+ getArrowhead() : String\l+ setStyle(java.lang.String) : void\l+ getStyle() : String\l}"];UMLArrow -> Object [arrowhead="onormal", style="solid", label="", color=""];UMLArrow -> IArrow [arrowhead="onormal", style="dashed", label="", color=""];UMLArrow -> IVisitor [arrowhead="open", style="dashed", label="", color=""];UMLClass[ shape="record", color="", label="{UMLClass|- className : String\l- color : String\l- methods : List\l- fields : List\l- arrows : List\l- patternLabel : String\l- access : int\l- related : List\l- canLabel : boolean\l|+ setClassName(java.lang.String) : void\l+ getAccess() : int\l+ setAccess(int) : void\l+ getPatternLabel() : String\l+ accept(problem.api.IVisitor) : void\l+ getColor() : String\l+ setColor(java.lang.String) : void\l+ getClassName() : String\l+ setPatternLabel(java.lang.String) : void\l+ setCanLabel(boolean) : void\l+ addIArrow(problem.api.IArrow) : void\l+ getArrows() : List\l+ getRelated() : List\l+ getRelatedClassNames(java.lang.String) : List\l+ addIField(problem.api.IField) : void\l+ getFields() : List\l+ addIMethod(problem.api.IMethod) : void\l+ getMethods() : List\l+ getCanLabel() : boolean\l+ addRelated(problem.api.IClass) : void\l}"];UMLClass -> Object [arrowhead="onormal", style="solid", label="", color=""];UMLClass -> IClass [arrowhead="onormal", style="dashed", label="", color=""];UMLClass -> IMethod [arrowhead="open", style="solid", label="", color=""];UMLClass -> IField [arrowhead="open", style="solid", label="", color=""];UMLClass -> IArrow [arrowhead="open", style="solid", label="", color=""];UMLClass -> IClass [arrowhead="open", style="solid", label="", color=""];UMLClass -> IVisitor [arrowhead="open", style="dashed", label="", color=""];UMLClass -> Iterator [arrowhead="open", style="dashed", label="", color=""];UMLField[ shape="record", color="", label="{UMLField|- access : int\l- name : String\l- type : String\l|+ setAccess(int) : void\l+ getType() : String\l+ setType(java.lang.String) : void\l+ accept(problem.api.IVisitor) : void\l+ getName() : String\l+ setName(java.lang.String) : void\l+ getAccess() : int\l}"];UMLField -> Object [arrowhead="onormal", style="solid", label="", color=""];UMLField -> IField [arrowhead="onormal", style="dashed", label="", color=""];UMLField -> IVisitor [arrowhead="open", style="dashed", label="", color=""];UMLMethod[ shape="record", color="", label="{UMLMethod|- access : int\l- name : String\l- returnType : String\l- argTypes : List\l|+ setAccess(int) : void\l+ getArgTypes() : List\l+ addArgType(java.lang.String) : void\l+ getReturnType() : String\l+ accept(problem.api.IVisitor) : void\l+ getName() : String\l+ setName(java.lang.String) : void\l+ getAccess() : int\l+ setReturnType(java.lang.String) : void\l}"];UMLMethod -> Object [arrowhead="onormal", style="solid", label="", color=""];UMLMethod -> IMethod [arrowhead="onormal", style="dashed", label="", color=""];UMLMethod -> IVisitor [arrowhead="open", style="dashed", label="", color=""];ImageUI[ shape="record", color="", label="{ImageUI|- frame : JFrame\l- runner : PhaseRunner\l imageComponent : ImageComponent\l- factory : AbstractCheckListFactory\l progressBar : JProgressBar\l icon : Icon\l|- createCheckLists() : void\l- addCheckList(javax.swing.JPanel,  problem.jfactory.JCheckList) : void\l- createImage() : void\l}"];ImageUI -> JPanel [arrowhead="onormal", style="solid", label="", color=""];ImageUI -> Icon [arrowhead="open", style="solid", label="", color=""];ImageUI -> JFrame [arrowhead="open", style="solid", label="", color=""];ImageUI -> ImageComponent [arrowhead="open", style="solid", label="", color=""];ImageUI -> BorderLayout [arrowhead="open", style="solid", label="", color=""];ImageUI -> JPanel [arrowhead="open", style="solid", label="", color=""];ImageUI -> PhaseRunner [arrowhead="open", style="solid", label="", color=""];ImageUI -> JProgressBar [arrowhead="open", style="solid", label="", color=""];ImageUI -> ImageProxy [arrowhead="open", style="solid", label="", color=""];ImageUI -> StandardCheckListFactory [arrowhead="open", style="solid", label="", color=""];ImageUI -> AbstractCheckListFactory [arrowhead="open", style="solid", label="", color=""];ImageUI -> JCheckList [arrowhead="open", style="dashed", label="", color=""];ImageUI -> ImageUI [arrowhead="open", style="dashed", label="", color=""];ImageUI -> Container [arrowhead="open", style="dashed", label="", color=""];ImageUI -> Iterator [arrowhead="open", style="dashed", label="", color=""];UI[ shape="record", color="", label="{UI| loadButton : String\l serialVersionUID : long\l runner : PhaseRunner\l- fileSelected : String\l analyze : String\l progressBar : JProgressBar\l frame : JFrame\l| access$1(problem.gui.UI) : String\l+ createButtons() : void\l+ clearScreen() : void\l+ createDisplay() : void\l access$0(problem.gui.UI,  java.lang.String) : void\l}"];UI -> JPanel [arrowhead="onormal", style="solid", label="", color=""];UI -> JButton [arrowhead="open", style="solid", label="", color=""];UI -> JFrame [arrowhead="open", style="solid", label="", color=""];UI -> BorderLayout [arrowhead="open", style="solid", label="", color=""];UI -> JPanel [arrowhead="open", style="solid", label="", color=""];UI -> JProgressBar [arrowhead="open", style="solid", label="", color=""];UI -> Dimension [arrowhead="open", style="solid", label="", color=""];UI -> PhaseRunner [arrowhead="open", style="solid", label="", color=""];UI -> ImageUI [arrowhead="open", style="solid", label="", color=""];UI -> UI [arrowhead="open", style="dashed", label="", color=""];UI -> ConfigProperties [arrowhead="open", style="dashed", label="", color=""];Helpers[ shape="record", color="", label="{Helpers|| isClassNameValid(java.lang.String) : boolean\l getPackageFromPath(java.lang.String,  java.lang.String) : String\l getName(java.lang.String) : String\l getAccessSymbol(int) : String\l getCamelCase(java.lang.String) : String\l sortListByNum(java.util.ArrayList,  int) : void\l}"];Helpers -> Object [arrowhead="onormal", style="solid", label="", color=""];ImageComponent[ shape="record", color="", label="{ImageComponent|- icon : Icon\l serialVersionUID : long\l|+ setIcon(javax.swing.Icon) : void\l+ paintComponent(java.awt.Graphics) : void\l}"];ImageComponent -> JComponent [arrowhead="onormal", style="solid", label="", color=""];ImageComponent -> JComponent [arrowhead="open", style="solid", label="", color=""];ImageComponent -> Icon [arrowhead="open", style="solid", label="", color=""];ImageComponent -> Graphics [arrowhead="open", style="dashed", label="", color=""];ImageProxy[ shape="record", color="", label="{ImageProxy| retrievalThread : Thread\l imageIcon : ImageIcon\l completedLoading : boolean\l newPanel : JPanel\l text : JTextArea\l frame : JFrame\l retrieving : boolean\l pane : JScrollPane\l label : JLabel\l|+ getIconWidth() : int\l+ getIconHeight() : int\l+ paintIcon(java.awt.Component,  java.awt.Graphics,  int,  int) : void\l+ isCompleted() : boolean\l}"];ImageProxy -> Object [arrowhead="onormal", style="solid", label="", color=""];ImageProxy -> Icon [arrowhead="onormal", style="dashed", label="", color=""];ImageProxy -> JLabel [arrowhead="open", style="solid", label="", color=""];ImageProxy -> JPanel [arrowhead="open", style="solid", label="", color=""];ImageProxy -> JFrame [arrowhead="open", style="solid", label="", color=""];ImageProxy -> JScrollPane [arrowhead="open", style="solid", label="", color=""];ImageProxy -> JTextArea [arrowhead="open", style="solid", label="", color=""];ImageProxy -> Dimension [arrowhead="open", style="solid", label="", color=""];ImageProxy -> ImageIcon [arrowhead="open", style="solid", label="", color=""];ImageProxy -> Component [arrowhead="open", style="dashed", label="", color=""];ImageProxy -> Graphics [arrowhead="open", style="dashed", label="", color=""];ImageProxy -> Container [arrowhead="open", style="dashed", label="", color=""];AbstractCheckListFactory[ shape="record", color="", label="{AbstractCheckListFactory|| createCheckList(java.lang.String) : JCheckList\l}"];AbstractCheckListFactory -> Object [arrowhead="onormal", style="solid", label="", color=""];JCheckList[ shape="record", color="", label="{JCheckList|- subCheckBoxes : List\l|+ getSubCheckBoxes() : List\l+ setSubCheckBoxes(java.util.List) : void\l+ addSubCheckBox(javax.swing.JCheckBox) : void\l}"];JCheckList -> JCheckBox [arrowhead="onormal", style="solid", label="", color=""];JCheckList -> JCheckBox [arrowhead="open", style="solid", label="", color=""];StandardCheckListFactory[ shape="record", color="", label="{StandardCheckListFactory|- classes : List\l|+ createCheckList(java.lang.String) : JCheckList\l}"];StandardCheckListFactory -> AbstractCheckListFactory [arrowhead="onormal", style="solid", label="", color=""];StandardCheckListFactory -> JCheckBox [arrowhead="open", style="solid", label="", color=""];StandardCheckListFactory -> AbstractCheckListFactory [arrowhead="open", style="solid", label="", color=""];StandardCheckListFactory -> JCheckList [arrowhead="open", style="solid", label="", color=""];StandardCheckListFactory -> IClass [arrowhead="open", style="solid", label="", color=""];StandardCheckListFactory -> ClassStorage [arrowhead="open", style="dashed", label="", color=""];StandardCheckListFactory -> Helpers [arrowhead="open", style="dashed", label="", color=""];StandardCheckListFactory -> Iterator [arrowhead="open", style="dashed", label="", color=""];MethodDesignParser[ shape="record", color="", label="{MethodDesignParser|- callDepth : int\l- parsedCode : HashMap\l count : int\l DEFAULT_DEPTH : int\l|+ parse(java.lang.String,  problem.api.IGraphDesign) : void\l+ getParsedCode() : HashMap\l <clinit>() : void\l}"];MethodDesignParser -> Object [arrowhead="onormal", style="solid", label="", color=""];MethodDesignParser -> IDesignParser [arrowhead="onormal", style="dashed", label="", color=""];MethodDesignParser -> Error [arrowhead="open", style="solid", label="", color=""];MethodDesignParser -> IGraphDesign [arrowhead="open", style="dashed", label="", color=""];AdapterPatternDetector[ shape="record", color="", label="{AdapterPatternDetector| patternLabelAdapter : String\l colorString : String\l- target : String\l- adapter : String\l- classes : List\l patternLabelTarget : String\l patternLabelAdaptee : String\l- adaptee : String\l arrowLabel : String\l|+ detectPattern() : void\l- isAdapter(problem.api.IClass) : void\l- isAssociated(problem.api.IClass) : void\l- containsInterfaceField(problem.api.IClass,  java.lang.String) : void\l}"];AdapterPatternDetector -> Object [arrowhead="onormal", style="solid", label="", color=""];AdapterPatternDetector -> IPatternDetector [arrowhead="onormal", style="dashed", label="", color=""];AdapterPatternDetector -> IClass [arrowhead="open", style="solid", label="", color=""];AdapterPatternDetector -> IArrow [arrowhead="open", style="dashed", label="", color=""];AdapterPatternDetector -> IField [arrowhead="open", style="dashed", label="", color=""];AdapterPatternDetector -> AdapterPatternDetector [arrowhead="open", style="dashed", label="", color=""];AdapterPatternDetector -> Helpers [arrowhead="open", style="dashed", label="", color=""];AdapterPatternDetector -> ClassStorage [arrowhead="open", style="dashed", label="", color=""];AdapterPatternDetector -> Iterator [arrowhead="open", style="dashed", label="", color=""];CompositePatternDetector[ shape="record", color="", label="{CompositePatternDetector| componentLabel : String\l colorString : String\l leafLabel : String\l compositeLabel : String\l- classes : List\l- component : IClass\l|- getComponent(problem.api.IClass) : IClass\l+ detectPattern() : void\l- checkComposite(problem.api.IClass) : boolean\l- checkLeaf(problem.api.IClass) : boolean\l- methodSigInComponent(java.lang.String,  java.util.List,  java.lang.String) : boolean\l}"];CompositePatternDetector -> Object [arrowhead="onormal", style="solid", label="", color=""];CompositePatternDetector -> IPatternDetector [arrowhead="onormal", style="dashed", label="", color=""];CompositePatternDetector -> IClass [arrowhead="open", style="solid", label="", color=""];CompositePatternDetector -> Helpers [arrowhead="open", style="dashed", label="", color=""];CompositePatternDetector -> IMethod [arrowhead="open", style="dashed", label="", color=""];CompositePatternDetector -> ClassStorage [arrowhead="open", style="dashed", label="", color=""];CompositePatternDetector -> CompositePatternDetector [arrowhead="open", style="dashed", label="", color=""];CompositePatternDetector -> Iterator [arrowhead="open", style="dashed", label="", color=""];DecoratorPatternDetector[ shape="record", color="", label="{DecoratorPatternDetector| decoratorLabel : String\l colorString : String\l- classes : List\l arrowLabel : String\l componentLabel : String\l- componentLabeled : boolean\l- componentName : String\l|+ detectPattern() : void\l- checkDecorator(problem.api.IClass) : boolean\l- getComponent(problem.api.IClass,  problem.api.IClass) : String\l- checkConstructor(problem.api.IClass,  java.lang.String) : boolean\l}"];DecoratorPatternDetector -> Object [arrowhead="onormal", style="solid", label="", color=""];DecoratorPatternDetector -> IPatternDetector [arrowhead="onormal", style="dashed", label="", color=""];DecoratorPatternDetector -> IClass [arrowhead="open", style="solid", label="", color=""];DecoratorPatternDetector -> IArrow [arrowhead="open", style="dashed", label="", color=""];DecoratorPatternDetector -> Helpers [arrowhead="open", style="dashed", label="", color=""];DecoratorPatternDetector -> IMethod [arrowhead="open", style="dashed", label="", color=""];DecoratorPatternDetector -> DecoratorPatternDetector [arrowhead="open", style="dashed", label="", color=""];DecoratorPatternDetector -> ClassStorage [arrowhead="open", style="dashed", label="", color=""];DecoratorPatternDetector -> Iterator [arrowhead="open", style="dashed", label="", color=""];SingletonPatternDetector[ shape="record", color="", label="{SingletonPatternDetector| patternLabel : String\l colorString : String\l- classes : List\l|+ detectPattern() : void\l+ checkStatus(problem.api.IClass) : boolean\l+ checkForGetInstance(problem.api.IClass) : boolean\l+ checkForPrivateConstructor(problem.api.IClass) : boolean\l}"];SingletonPatternDetector -> Object [arrowhead="onormal", style="solid", label="", color=""];SingletonPatternDetector -> IPatternDetector [arrowhead="onormal", style="dashed", label="", color=""];SingletonPatternDetector -> IClass [arrowhead="open", style="solid", label="", color=""];SingletonPatternDetector -> ClassStorage [arrowhead="open", style="dashed", label="", color=""];SingletonPatternDetector -> IField [arrowhead="open", style="dashed", label="", color=""];SingletonPatternDetector -> SingletonPatternDetector [arrowhead="open", style="dashed", label="", color=""];SingletonPatternDetector -> Helpers [arrowhead="open", style="dashed", label="", color=""];SingletonPatternDetector -> IMethod [arrowhead="open", style="dashed", label="", color=""];SingletonPatternDetector -> Iterator [arrowhead="open", style="dashed", label="", color=""];AdapterPhase[ shape="record", color="", label="{AdapterPhase||+ execute() : void\l}"];AdapterPhase -> Object [arrowhead="onormal", style="solid", label="", color=""];AdapterPhase -> IPhase [arrowhead="onormal", style="dashed", label="", color=""];AdapterPhase -> AdapterPatternDetector [arrowhead="open", style="solid", label="", color=""];AdapterPhase -> IPatternDetector [arrowhead="open", style="dashed", label="", color=""];CompositePhase[ shape="record", color="", label="{CompositePhase||+ execute() : void\l}"];CompositePhase -> Object [arrowhead="onormal", style="solid", label="", color=""];CompositePhase -> IPhase [arrowhead="onormal", style="dashed", label="", color=""];CompositePhase -> CompositePatternDetector [arrowhead="open", style="solid", label="", color=""];CompositePhase -> IPatternDetector [arrowhead="open", style="dashed", label="", color=""];DecoratorPhase[ shape="record", color="", label="{DecoratorPhase||+ execute() : void\l}"];DecoratorPhase -> Object [arrowhead="onormal", style="solid", label="", color=""];DecoratorPhase -> IPhase [arrowhead="onormal", style="dashed", label="", color=""];DecoratorPhase -> DecoratorPatternDetector [arrowhead="open", style="solid", label="", color=""];DecoratorPhase -> IPatternDetector [arrowhead="open", style="dashed", label="", color=""];LoaderPhase[ shape="record", color="", label="{LoaderPhase|- baseDirectory : String\l|+ execute() : void\l- listf(java.lang.String,  java.util.ArrayList) : void\l isJavaFile(java.io.File) : boolean\l}"];LoaderPhase -> Object [arrowhead="onormal", style="solid", label="", color=""];LoaderPhase -> IPhase [arrowhead="onormal", style="dashed", label="", color=""];LoaderPhase -> DotGraphDesign [arrowhead="open", style="solid", label="", color=""];LoaderPhase -> ClassDesignParser [arrowhead="open", style="solid", label="", color=""];LoaderPhase -> File [arrowhead="open", style="solid", label="", color=""];LoaderPhase -> LoaderPhase [arrowhead="open", style="dashed", label="", color=""];LoaderPhase -> Helpers [arrowhead="open", style="dashed", label="", color=""];LoaderPhase -> IDesignParser [arrowhead="open", style="dashed", label="", color=""];LoaderPhase -> ConfigProperties [arrowhead="open", style="dashed", label="", color=""];SingletonPhase[ shape="record", color="", label="{SingletonPhase||+ execute() : void\l}"];SingletonPhase -> Object [arrowhead="onormal", style="solid", label="", color=""];SingletonPhase -> IPhase [arrowhead="onormal", style="dashed", label="", color=""];SingletonPhase -> SingletonPatternDetector [arrowhead="open", style="solid", label="", color=""];SingletonPhase -> IPatternDetector [arrowhead="open", style="dashed", label="", color=""];PhaseRunner[ shape="record", color="", label="{PhaseRunner|- props : ConfigProperties\l- phases : HashMap\l|+ addPhase(java.lang.String,  problem.api.IPhase) : void\l+ run() : void\l access$0(problem.PhaseRunner) : ConfigProperties\l}"];PhaseRunner -> Object [arrowhead="onormal", style="solid", label="", color=""];PhaseRunner -> ConfigProperties [arrowhead="open", style="solid", label="", color=""];PhaseRunner -> IPhase [arrowhead="open", style="dashed", label="", color=""];PhaseRunner -> PhaseRunner [arrowhead="open", style="dashed", label="", color=""];SequenceGraphDesign[ shape="record", color="", label="{SequenceGraphDesign|- fp : FileProperties\l- sb : StringBuilder\l- codeGetters : List\l|+ addCodeGetter(problem.api.IGraphCode) : void\l+ getCodeGetters() : List\l+ removeCodeGetter(problem.api.IGraphCode) : void\l+ useDefaultCodeGetters() : void\l+ addGraphCode(java.util.HashMap) : void\l+ initializeGraph() : void\l+ closeGraph() : void\l+ generateGraph() : void\l+ addPatternDetector(problem.api.IPatternDetector) : void\l+ useDefaultPatternDetectors() : void\l+ removePatternDetector(problem.api.IPatternDetector) : void\l}"];SequenceGraphDesign -> Object [arrowhead="onormal", style="solid", label="", color=""];SequenceGraphDesign -> IGraphDesign [arrowhead="onormal", style="dashed", label="", color=""];SequenceGraphDesign -> Error [arrowhead="open", style="solid", label="", color=""];SequenceGraphDesign -> FileProperties [arrowhead="open", style="solid", label="", color=""];SequenceGraphDesign -> IGraphCode [arrowhead="open", style="solid", label="", color=""];SequenceGraphDesign -> IPatternDetector [arrowhead="open", style="dashed", label="", color=""];ClassAssociationVisitor[ shape="record", color="", label="{ClassAssociationVisitor|- parsedCode : HashMap\l|+ visitMethod(int,  java.lang.String,  java.lang.String,  java.lang.String,  java.lang.String) : MethodVisitor\l+ getParsedCode() : HashMap\l}"];ClassAssociationVisitor -> ClassVisitor [arrowhead="onormal", style="solid", label="", color=""];ClassAssociationVisitor -> MethodAssociationVisitor [arrowhead="open", style="solid", label="", color=""];ClassAssociationVisitor -> ClassVisitor [arrowhead="open", style="solid", label="", color=""];ClassDeclarationVisitor[ shape="record", color="", label="{ClassDeclarationVisitor|- parsedCode : HashMap\l|+ visit(int,  int,  java.lang.String,  java.lang.String,  java.lang.String,  java.lang.String) : void\l+ getParsedCode() : HashMap\l}"];ClassDeclarationVisitor -> ClassVisitor [arrowhead="onormal", style="solid", label="", color=""];ClassDeclarationVisitor -> ClassVisitor [arrowhead="open", style="solid", label="", color=""];ClassFieldVisitor[ shape="record", color="", label="{ClassFieldVisitor|- fieldCounter : int\l- parsedCode : HashMap\l|+ visitField(int,  java.lang.String,  java.lang.String,  java.lang.String,  java.lang.Object) : FieldVisitor\l+ getParsedCode() : HashMap\l}"];ClassFieldVisitor -> ClassVisitor [arrowhead="onormal", style="solid", label="", color=""];ClassFieldVisitor -> ClassVisitor [arrowhead="open", style="solid", label="", color=""];ClassMethodVisitor[ shape="record", color="", label="{ClassMethodVisitor|- methodCounter : int\l- parsedCode : HashMap\l|+ visitMethod(int,  java.lang.String,  java.lang.String,  java.lang.String,  java.lang.String) : MethodVisitor\l+ getParsedCode() : HashMap\l}"];ClassMethodVisitor -> ClassVisitor [arrowhead="onormal", style="solid", label="", color=""];ClassMethodVisitor -> ClassVisitor [arrowhead="open", style="solid", label="", color=""];ClassSequenceVisitor[ shape="record", color="", label="{ClassSequenceVisitor|- callDepth : int\l- parsedCode : HashMap\l- className : String\l- methodName : String\l- argTypes : ArrayList\l- methodCalls : List\l|+ getMethodCalls() : List\l+ visitMethod(int,  java.lang.String,  java.lang.String,  java.lang.String,  java.lang.String) : MethodVisitor\l+ visit(int,  int,  java.lang.String,  java.lang.String,  java.lang.String,  java.lang.String) : void\l+ getParsedCode() : HashMap\l}"];ClassSequenceVisitor -> ClassVisitor [arrowhead="onormal", style="solid", label="", color=""];ClassSequenceVisitor -> MethodSequenceVisitor [arrowhead="open", style="solid", label="", color=""];ClassSequenceVisitor -> ClassVisitor [arrowhead="open", style="solid", label="", color=""];ClassUsesVisitor[ shape="record", color="", label="{ClassUsesVisitor|- parsedCode : HashMap\l|+ visitMethod(int,  java.lang.String,  java.lang.String,  java.lang.String,  java.lang.String) : MethodVisitor\l}"];ClassUsesVisitor -> ClassVisitor [arrowhead="onormal", style="solid", label="", color=""];ClassUsesVisitor -> ClassVisitor [arrowhead="open", style="solid", label="", color=""];ClassUsesVisitor -> MethodUsesVisitor [arrowhead="open", style="solid", label="", color=""];MethodAssociationVisitor[ shape="record", color="", label="{MethodAssociationVisitor|- parsedCode : HashMap\l|+ visitFieldInsn(int,  java.lang.String,  java.lang.String,  java.lang.String) : void\l+ visitMethodInsn(int,  java.lang.String,  java.lang.String,  java.lang.String,  boolean) : void\l+ getParsedCode() : HashMap\l}"];MethodAssociationVisitor -> MethodVisitor [arrowhead="onormal", style="solid", label="", color=""];MethodAssociationVisitor -> MethodVisitor [arrowhead="open", style="solid", label="", color=""];MethodSequenceVisitor[ shape="record", color="", label="{MethodSequenceVisitor|- callDepth : int\l- parsedCode : HashMap\l- methodCalls : List\l- className : String\l|+ visitMethodInsn(int,  java.lang.String,  java.lang.String,  java.lang.String,  boolean) : void\l+ getParsedCode() : HashMap\l}"];MethodSequenceVisitor -> MethodVisitor [arrowhead="onormal", style="solid", label="", color=""];MethodSequenceVisitor -> ClassSequenceVisitor [arrowhead="open", style="solid", label="", color=""];MethodSequenceVisitor -> MethodVisitor [arrowhead="open", style="solid", label="", color=""];MethodUsesVisitor[ shape="record", color="", label="{MethodUsesVisitor|- parsedCode : HashMap\l|+ visitMethodInsn(int,  java.lang.String,  java.lang.String,  java.lang.String,  boolean) : void\l+ getParsedCode() : HashMap\l}"];MethodUsesVisitor -> MethodVisitor [arrowhead="onormal", style="solid", label="", color=""];MethodUsesVisitor -> MethodVisitor [arrowhead="open", style="solid", label="", color=""];List[ shape="record", color="", label="{\<\<interface\>\>\nList|| toArray(java.lang.Object) : Object[]\l add(java.lang.Object) : boolean\l remove(java.lang.Object) : boolean\l containsAll(java.util.Collection) : boolean\l isEmpty() : boolean\l contains(java.lang.Object) : boolean\l iterator() : Iterator\l toArray(java.lang.Object) : Object[]\l add(java.lang.Object) : boolean\l addAll(java.util.Collection) : boolean\l clear() : void\l+ sort(java.util.Comparator) : void\l hashCode() : int\l equals(java.lang.Object) : boolean\l removeAll(java.util.Collection) : boolean\l addAll(java.util.Collection) : boolean\l+ replaceAll(java.util.function.UnaryOperator) : void\l retainAll(java.util.Collection) : boolean\l size() : int\l set(int,  java.lang.Object) : Object\l get(int) : Object\l subList(int,  int) : List\l listIterator(int) : ListIterator\l+ spliterator() : Spliterator\l indexOf(java.lang.Object) : int\l remove(java.lang.Object) : boolean\l listIterator(int) : ListIterator\l lastIndexOf(java.lang.Object) : int\l}"];List -> Object [arrowhead="onormal", style="solid", label="", color=""];List -> Collection [arrowhead="onormal", style="dashed", label="", color=""];List -> Collection [arrowhead="open", style="dashed", label="", color=""];List -> Comparator [arrowhead="open", style="dashed", label="", color=""];List -> UnaryOperator [arrowhead="open", style="dashed", label="", color=""];List -> Spliterators [arrowhead="open", style="dashed", label="", color=""];List -> ListIterator [arrowhead="open", style="dashed", label="", color=""];}