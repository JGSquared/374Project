digraph G{rankdir=BT;CodeMapGetters[ shape="record", color="", label="{problem/api/CodeMapGetters|- items : HashMap\l|- findFieldProperties(java.lang.String) : String[]+ getFieldNames() : ArrayList+ getFieldAccess(java.lang.String) : int+ getFieldType(java.lang.String) : String+ getClassName() : String+ getAccess() : int+ getClassExtends() : String+ getClassImplements() : String[]+ getSequenceMethodCaller(java.lang.String) : String+ getFieldSignature(java.lang.String) : String+ getClassUses() : ArrayList+ getMethodReturnType(java.lang.String) : String+ getSequenceNodeKeys() : ArrayList+ getClassAssociates() : ArrayList+ getMethodNames() : ArrayList- findMethodProperties(java.lang.String) : String[]+ getMethodArgTypes(java.lang.String) : String[]+ getMethodAccess(java.lang.String) : int+ getSequenceMethodKeys() : ArrayList+ getSequenceNodeValue(java.lang.String) : String+ getSequenceMethodName(java.lang.String) : String+ getSequenceMethodCallee(java.lang.String) : String+ getFieldFromMap(java.lang.String) : String+ getSequenceMethodArgs(java.lang.String) : String[]}"];IArrow[ shape="record", color="", label="{\<\<interface\>\>\nproblem/api/IArrow|| setColor(java.lang.String) : void getType() : String setType(java.lang.String) : void getArrowhead() : String setFrom(java.lang.String) : void getTo() : String setTo(java.lang.String) : void getColor() : String setArrowhead(java.lang.String) : void setCanLabel(boolean) : void getCanLabel() : boolean setStyle(java.lang.String) : void getStyle() : String setLabel(java.lang.String) : void getLabel() : String getFrom() : String}"];IClass[ shape="record", color="", label="{\<\<interface\>\>\nproblem/api/IClass|| setAccess(int) : void getPatternLabel() : String setPatternLabel(java.lang.String) : void getCanLabel() : boolean setColor(java.lang.String) : void getClassName() : String setClassName(java.lang.String) : void getAccess() : int setCanLabel(boolean) : void addIMethod(problem.api.IMethod) : void getMethods() : List addIArrow(problem.api.IArrow) : void getArrows() : List addRelated(problem.api.IClass) : void getRelated() : List addIField(problem.api.IField) : void getFields() : List getColor() : String getRelatedClassNames(java.lang.String) : List}"];ICommand[ shape="record", color="", label="{\<\<interface\>\>\nproblem/api/ICommand|| execute(problem.api.ITraverser) : void}"];IDesignParser[ shape="record", color="", label="{\<\<interface\>\>\nproblem/api/IDesignParser|| parse(java.lang.String,  problem.api.IGraphDesign) : void}"];IField[ shape="record", color="", label="{\<\<interface\>\>\nproblem/api/IField|| setType(java.lang.String) : void setName(java.lang.String) : void getAccess() : int setAccess(int) : void getType() : String getName() : String}"];IGraphCode[ shape="record", color="", label="{\<\<interface\>\>\nproblem/api/IGraphCode|| getCode(problem.api.CodeMapGetters) : String}"];IGraphDesign[ shape="record", color="", label="{\<\<interface\>\>\nproblem/api/IGraphDesign|| addGraphCode(java.util.HashMap) : void}"];IMethod[ shape="record", color="", label="{\<\<interface\>\>\nproblem/api/IMethod|| addArgType(java.lang.String) : void getReturnType() : String setReturnType(java.lang.String) : void setName(java.lang.String) : void getAccess() : int setAccess(int) : void getArgTypes() : List getName() : String}"];IPatternDetector[ shape="record", color="", label="{\<\<interface\>\>\nproblem/api/IPatternDetector|| detectPattern() : void}"];IPhase[ shape="record", color="", label="{\<\<interface\>\>\nproblem/api/IPhase|| execute() : void}"];ITraverser[ shape="record", color="", label="{\<\<interface\>\>\nproblem/api/ITraverser|| accept(problem.api.IVisitor) : void}"];IVisitor[ shape="record", color="", label="{\<\<interface\>\>\nproblem/api/IVisitor|| addPostVisit(java.lang.Class,  problem.api.ICommand) : void visit(problem.api.ITraverser) : void postVisit(problem.api.ITraverser) : void addPreVisit(java.lang.Class,  problem.api.ICommand) : void addVisit(java.lang.Class,  problem.api.ICommand) : void preVisit(problem.api.ITraverser) : void}"];IWriter[ shape="record", color="", label="{\<\<interface\>\>\nproblem/api/IWriter|| generateGraph() : void}"];App[ shape="record", color="", label="{problem/App|| main(java.lang.String) : void}"];ClassDesignParser[ shape="record", color="", label="{problem/ClassDesignParser|- parsedCode : HashMap\l|+ parse(java.lang.String,  problem.api.IGraphDesign) : void}"];ClassStorage[ shape="record", color="", label="{problem/ClassStorage|- classes : List\l uniqueController : ClassStorage\l|- falsifyAllFlags() : void getInstance() : ClassStorage+ addIClass(problem.api.IClass) : void+ getClasses() : List+ setClassesToLabel(java.util.List) : void}"];AbstractCodeWriter[ shape="record", color="", label="{problem/code/AbstractCodeWriter|- visitClassToCommand : Map\l- preVisitClassToCommand : Map\l- postVisitClassToCommand : Map\l|+ addVisit(java.lang.Class,  problem.api.ICommand) : void+ addPostVisit(java.lang.Class,  problem.api.ICommand) : void+ preVisit(problem.api.ITraverser) : void+ visit(problem.api.ITraverser) : void+ postVisit(problem.api.ITraverser) : void+ addPreVisit(java.lang.Class,  problem.api.ICommand) : void}"];GraphClassCloserCode[ shape="record", color="", label="{problem/code/GraphClassCloserCode||+ getCode(problem.api.CodeMapGetters) : String}"];GraphDeclarationCode[ shape="record", color="", label="{problem/code/GraphDeclarationCode||+ getCode(problem.api.CodeMapGetters) : String}"];GraphExtensionAndImplementCode[ shape="record", color="", label="{problem/code/GraphExtensionAndImplementCode||+ getCode(problem.api.CodeMapGetters) : String}"];GraphFieldCode[ shape="record", color="", label="{problem/code/GraphFieldCode||+ getCode(problem.api.CodeMapGetters) : String}"];GraphMethodCode[ shape="record", color="", label="{problem/code/GraphMethodCode||+ getCode(problem.api.CodeMapGetters) : String}"];GraphSequenceMethodCode[ shape="record", color="", label="{problem/code/GraphSequenceMethodCode| KEY_NAME : String\l|+ getCode(problem.api.CodeMapGetters) : String}"];GraphSequenceNodeCode[ shape="record", color="", label="{problem/code/GraphSequenceNodeCode| KEY_NAME : String\l|+ getCode(problem.api.CodeMapGetters) : String}"];GraphUsesCode[ shape="record", color="", label="{problem/code/GraphUsesCode||+ getCode(problem.api.CodeMapGetters) : String}"];UMLCodeWriter[ shape="record", color="", label="{problem/code/UMLCodeWriter| out : OutputStream\l|- addPostVisits() : void+ getStream() : OutputStream access$0(problem.code.UMLCodeWriter,  java.lang.String) : void+ generateGraph() : void- write(java.lang.String) : void- addPreVisits() : void- addVisits() : void}"];ConfigProperties[ shape="record", color="", label="{problem/ConfigProperties|- props : Properties\l uniqueController : ConfigProperties\l- progressBar : JProgressBar\l- phases : String[]\l- inputClasses : String[]\l- inputFolder : String\l- dotPath : String\l- outputFolder : String\l|+ getOutputFolder() : String+ getDotPath() : String+ getPhases() : String[]+ getProperty(java.lang.String) : String getInstance() : ConfigProperties+ setupConfig(java.lang.String) : void+ getInputFolder() : String+ getInputClasses() : String[]+ setProgressBar(javax.swing.JProgressBar) : void}"];Constants[ shape="record", color="", label="{problem/Constants| COLOR_OFFSET : String\l LABEL_OFFSET : String\l OUTFILE_NAME : String\l ARROW_OFFSET : String\l|}"];DotGraphDesign[ shape="record", color="", label="{problem/DotGraphDesign|- fp : FileProperties\l- sb : StringBuilder\l- getters : CodeMapGetters\l- classCode : HashMap\l- codeGetters : List\l- patternDetectors : List\l- classProperties : List\l|+ addGraphCode(java.util.HashMap) : void}"];FileProperties[ shape="record", color="", label="{problem/FileProperties|+ graphVizPath : String\l uniqueInstance : FileProperties\l+ whiteList : List\l+ fileIn : String\l+ flags : String\l+ sdEditPath : String\l+ fileOut : String\l| getInstance() : FileProperties}"];UMLArrow[ shape="record", color="", label="{problem/graph/component/UMLArrow|- to : String\l- from : String\l- canLabel : boolean\l- label : String\l- type : String\l- color : String\l- style : String\l- arrowhead : String\l|+ setTo(java.lang.String) : void+ getColor() : String+ setColor(java.lang.String) : void+ getType() : String+ accept(problem.api.IVisitor) : void+ getFrom() : String+ setFrom(java.lang.String) : void+ getTo() : String+ setType(java.lang.String) : void+ setLabel(java.lang.String) : void+ getLabel() : String+ setCanLabel(boolean) : void+ getCanLabel() : boolean+ setArrowhead(java.lang.String) : void+ getArrowhead() : String+ setStyle(java.lang.String) : void+ getStyle() : String}"];UMLClass[ shape="record", color="", label="{problem/graph/component/UMLClass|- className : String\l- color : String\l- methods : List\l- fields : List\l- arrows : List\l- patternLabel : String\l- access : int\l- related : List\l- canLabel : boolean\l|+ setClassName(java.lang.String) : void+ getAccess() : int+ setAccess(int) : void+ getPatternLabel() : String+ accept(problem.api.IVisitor) : void+ getColor() : String+ setColor(java.lang.String) : void+ getClassName() : String+ setPatternLabel(java.lang.String) : void+ setCanLabel(boolean) : void+ addIArrow(problem.api.IArrow) : void+ getArrows() : List+ getRelated() : List+ getRelatedClassNames(java.lang.String) : List+ addIField(problem.api.IField) : void+ getFields() : List+ addIMethod(problem.api.IMethod) : void+ getMethods() : List+ getCanLabel() : boolean+ addRelated(problem.api.IClass) : void}"];UMLField[ shape="record", color="", label="{problem/graph/component/UMLField|- access : int\l- name : String\l- type : String\l|+ setAccess(int) : void+ getType() : String+ setType(java.lang.String) : void+ accept(problem.api.IVisitor) : void+ getName() : String+ setName(java.lang.String) : void+ getAccess() : int}"];UMLMethod[ shape="record", color="", label="{problem/graph/component/UMLMethod|- access : int\l- name : String\l- returnType : String\l- argTypes : List\l|+ setAccess(int) : void+ getArgTypes() : List+ addArgType(java.lang.String) : void+ getReturnType() : String+ accept(problem.api.IVisitor) : void+ getName() : String+ setName(java.lang.String) : void+ getAccess() : int+ setReturnType(java.lang.String) : void}"];UI[ shape="record", color="", label="{problem/gui/UI| loadButton : String\l serialVersionUID : long\l- fileSelected : String\l analyze : String\l progressBar : JProgressBar\l frame : JFrame\l|+ createButtons() : void+ clearScreen() : void+ createDisplay() : void access$0(problem.gui.UI) : String}"];Helpers[ shape="record", color="", label="{problem/Helpers|| isClassNameValid(java.lang.String) : boolean getPackageFromPath(java.lang.String,  java.lang.String) : String getName(java.lang.String) : String getAccessSymbol(int) : String getCamelCase(java.lang.String) : String sortListByNum(java.util.ArrayList,  int) : void}"];ImageProxy[ shape="record", color="", label="{problem/ImageProxy| retrieving : boolean\l retrievalThread : Thread\l|+ paintIcon(javax.swing.JPanel,  java.awt.Graphics) : void}"];AbstractCheckListFactory[ shape="record", color="", label="{problem/jfactory/AbstractCheckListFactory|| createCheckList(java.lang.String) : JCheckList}"];JCheckList[ shape="record", color="", label="{problem/jfactory/JCheckList|- subCheckBoxes : List\l|+ getSubCheckBoxes() : List+ setSubCheckBoxes(java.util.List) : void+ addSubCheckBox(javax.swing.JCheckBox) : void}"];StandardCheckListFactory[ shape="record", color="", label="{problem/jfactory/StandardCheckListFactory|- classes : List\l|+ createCheckList(java.lang.String) : JCheckList}"];MethodDesignParser[ shape="record", color="", label="{problem/MethodDesignParser|- callDepth : int\l- parsedCode : HashMap\l count : int\l DEFAULT_DEPTH : int\l|+ parse(java.lang.String,  problem.api.IGraphDesign) : void+ getParsedCode() : HashMap <clinit>() : void}"];AdapterPatternDetector[ shape="record", color="", label="{problem/patterns/AdapterPatternDetector| patternLabelAdapter : String\l colorString : String\l- target : String\l- adapter : String\l- classes : List\l patternLabelTarget : String\l patternLabelAdaptee : String\l- adaptee : String\l arrowLabel : String\l|+ detectPattern() : void- isAdapter(problem.api.IClass) : void- isAssociated(problem.api.IClass) : void- containsInterfaceField(problem.api.IClass,  java.lang.String) : void}"];CompositePatternDetector[ shape="record", color="", label="{problem/patterns/CompositePatternDetector| componentLabel : String\l colorString : String\l leafLabel : String\l compositeLabel : String\l- classes : List\l- component : IClass\l|- getComponent(problem.api.IClass) : IClass+ detectPattern() : void- checkComposite(problem.api.IClass) : boolean- checkLeaf(problem.api.IClass) : boolean- methodSigInComponent(java.lang.String,  java.util.List,  java.lang.String) : boolean}"];DecoratorPatternDetector[ shape="record", color="", label="{problem/patterns/DecoratorPatternDetector| decoratorLabel : String\l colorString : String\l- classes : List\l arrowLabel : String\l componentLabel : String\l- componentLabeled : boolean\l- componentName : String\l|+ detectPattern() : void- checkDecorator(problem.api.IClass) : boolean- getComponent(problem.api.IClass,  problem.api.IClass) : String- checkConstructor(problem.api.IClass,  java.lang.String) : boolean}"];SingletonPatternDetector[ shape="record", color="", label="{problem/patterns/SingletonPatternDetector| patternLabel : String\l colorString : String\l- classes : List\l|+ detectPattern() : void+ checkStatus(problem.api.IClass) : boolean+ checkForGetInstance(problem.api.IClass) : boolean+ checkForPrivateConstructor(problem.api.IClass) : boolean}"];AdapterPhase[ shape="record", color="", label="{problem/phase/AdapterPhase||+ execute() : void}"];CompositePhase[ shape="record", color="", label="{problem/phase/CompositePhase||+ execute() : void}"];DecoratorPhase[ shape="record", color="", label="{problem/phase/DecoratorPhase||+ execute() : void}"];LoaderPhase[ shape="record", color="", label="{problem/phase/LoaderPhase|- baseDirectory : String\l|+ execute() : void- listf(java.lang.String,  java.util.ArrayList) : void isJavaFile(java.io.File) : boolean}"];SingletonPhase[ shape="record", color="", label="{problem/phase/SingletonPhase||+ execute() : void}"];PhaseRunner[ shape="record", color="", label="{problem/PhaseRunner|- props : ConfigProperties\l- phases : HashMap\l|+ addPhase(java.lang.String,  problem.api.IPhase) : void+ run() : void access$0(problem.PhaseRunner) : ConfigProperties}"];SequenceGraphDesign[ shape="record", color="", label="{problem/SequenceGraphDesign|- fp : FileProperties\l- sb : StringBuilder\l- codeGetters : List\l|+ addCodeGetter(problem.api.IGraphCode) : void+ getCodeGetters() : List+ removeCodeGetter(problem.api.IGraphCode) : void+ useDefaultCodeGetters() : void+ addGraphCode(java.util.HashMap) : void+ initializeGraph() : void+ closeGraph() : void+ generateGraph() : void+ addPatternDetector(problem.api.IPatternDetector) : void+ useDefaultPatternDetectors() : void+ removePatternDetector(problem.api.IPatternDetector) : void}"];ClassAssociationVisitor[ shape="record", color="", label="{problem/visitor/ClassAssociationVisitor|- parsedCode : HashMap\l|+ visitMethod(int,  java.lang.String,  java.lang.String,  java.lang.String,  java.lang.String) : MethodVisitor+ getParsedCode() : HashMap}"];ClassDeclarationVisitor[ shape="record", color="", label="{problem/visitor/ClassDeclarationVisitor|- parsedCode : HashMap\l|+ visit(int,  int,  java.lang.String,  java.lang.String,  java.lang.String,  java.lang.String) : void+ getParsedCode() : HashMap}"];ClassFieldVisitor[ shape="record", color="", label="{problem/visitor/ClassFieldVisitor|- fieldCounter : int\l- parsedCode : HashMap\l|+ visitField(int,  java.lang.String,  java.lang.String,  java.lang.String,  java.lang.Object) : FieldVisitor+ getParsedCode() : HashMap}"];ClassMethodVisitor[ shape="record", color="", label="{problem/visitor/ClassMethodVisitor|- methodCounter : int\l- parsedCode : HashMap\l|+ visitMethod(int,  java.lang.String,  java.lang.String,  java.lang.String,  java.lang.String) : MethodVisitor+ getParsedCode() : HashMap}"];ClassSequenceVisitor[ shape="record", color="", label="{problem/visitor/ClassSequenceVisitor|- callDepth : int\l- parsedCode : HashMap\l- className : String\l- methodName : String\l- argTypes : ArrayList\l- methodCalls : List\l|+ getMethodCalls() : List+ visitMethod(int,  java.lang.String,  java.lang.String,  java.lang.String,  java.lang.String) : MethodVisitor+ visit(int,  int,  java.lang.String,  java.lang.String,  java.lang.String,  java.lang.String) : void+ getParsedCode() : HashMap}"];ClassUsesVisitor[ shape="record", color="", label="{problem/visitor/ClassUsesVisitor|- parsedCode : HashMap\l|+ visitMethod(int,  java.lang.String,  java.lang.String,  java.lang.String,  java.lang.String) : MethodVisitor}"];MethodAssociationVisitor[ shape="record", color="", label="{problem/visitor/MethodAssociationVisitor|- parsedCode : HashMap\l|+ visitFieldInsn(int,  java.lang.String,  java.lang.String,  java.lang.String) : void+ visitMethodInsn(int,  java.lang.String,  java.lang.String,  java.lang.String,  boolean) : void+ getParsedCode() : HashMap}"];MethodSequenceVisitor[ shape="record", color="", label="{problem/visitor/MethodSequenceVisitor|- callDepth : int\l- parsedCode : HashMap\l- methodCalls : List\l- className : String\l|+ visitMethodInsn(int,  java.lang.String,  java.lang.String,  java.lang.String,  boolean) : void+ getParsedCode() : HashMap}"];MethodUsesVisitor[ shape="record", color="", label="{problem/visitor/MethodUsesVisitor|- parsedCode : HashMap\l|+ visitMethodInsn(int,  java.lang.String,  java.lang.String,  java.lang.String,  boolean) : void+ getParsedCode() : HashMap}"];List[ shape="record", color="", label="{\<\<interface\>\>\njava/util/List|| toArray(java.lang.Object) : Object[] add(java.lang.Object) : boolean remove(java.lang.Object) : boolean containsAll(java.util.Collection) : boolean isEmpty() : boolean contains(java.lang.Object) : boolean iterator() : Iterator toArray(java.lang.Object) : Object[] add(java.lang.Object) : boolean addAll(java.util.Collection) : boolean clear() : void+ sort(java.util.Comparator) : void hashCode() : int equals(java.lang.Object) : boolean removeAll(java.util.Collection) : boolean addAll(java.util.Collection) : boolean+ replaceAll(java.util.function.UnaryOperator) : void retainAll(java.util.Collection) : boolean size() : int set(int,  java.lang.Object) : Object get(int) : Object subList(int,  int) : List listIterator(int) : ListIterator+ spliterator() : Spliterator indexOf(java.lang.Object) : int remove(java.lang.Object) : boolean listIterator(int) : ListIterator lastIndexOf(java.lang.Object) : int}"];}